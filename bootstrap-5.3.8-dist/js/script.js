// Declare AOS antes de usar
const AOS = window.AOS;

// Inicializa AOS
document.addEventListener("DOMContentLoaded", () => {
  if (AOS) {
    AOS.init({
      duration: 1000,
      once: true,
      offset: 100,
    });
  }

  // ================== CARROSSEL ==================
  const carousel = document.getElementById("participantsCarousel");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtnCarousel = document.getElementById("nextBtn");
  const indicatorsContainer = document.getElementById("carouselIndicators");
  const cards = document.querySelectorAll(".participant-card");

  if (carousel && prevBtn && nextBtnCarousel && indicatorsContainer && cards.length > 0) {
    let currentIndex = 0;
    const totalCards = cards.length;

    // Cria indicadores
    for (let i = 0; i < totalCards; i++) {
      const indicator = document.createElement("div");
      indicator.classList.add("indicator");
      if (i === currentIndex) indicator.classList.add("active");
      indicator.addEventListener("click", () => goToSlide(i));
      indicatorsContainer.appendChild(indicator);
    }

    const indicators = document.querySelectorAll(".indicator");

    function updateCarousel() {
      cards.forEach((card, index) => {
        card.classList.remove("active");
        if (index === currentIndex) card.classList.add("active");
      });

      indicators.forEach((indicator, index) => {
        indicator.classList.remove("active");
        if (index === currentIndex) indicator.classList.add("active");
      });

      const cardWidth = cards[0].offsetWidth;
      const gap = 32;
      let scrollPosition = currentIndex * (cardWidth + gap);
      scrollPosition -= (carousel.offsetWidth / 2) - (cardWidth / 2);
      const maxScrollLeft = carousel.scrollWidth - carousel.offsetWidth;
      scrollPosition = Math.max(0, Math.min(scrollPosition, maxScrollLeft));

      carousel.scrollTo({
        left: scrollPosition,
        behavior: "smooth",
      });
    }

    function goToSlide(index) {
      currentIndex = index;
      updateCarousel();
    }

    prevBtn.addEventListener("click", () => {
      currentIndex = (currentIndex - 1 + totalCards) % totalCards;
      updateCarousel();
    });

    nextBtnCarousel.addEventListener("click", () => {
      currentIndex = (currentIndex + 1) % totalCards;
      updateCarousel();
    });

    updateCarousel();
  }

 
  // ================== CHECKLIST ==================

  // Script.js
const tasks = [
  "Preparar as refei√ß√µes da fam√≠lia üç≥",
  "Organizar a casa üßπ",
  "Ajudar os filhos nas tarefas escolares üìö",
  "Trabalhar ou estudar fora de casa üíº",
  "Cuidar da sa√∫de f√≠sica üèÉ‚Äç‚ôÄÔ∏è",
  "Reservar tempo para lazer üé¨",
  "Gerenciar as finan√ßas familiares üí∞",
  "Apoiar emocionalmente familiares üíû",
  "Separar um tempo para autocuidado üßñ‚Äç‚ôÄÔ∏è",
  "Praticar um hobby pessoal üé®",
  "Fazer compras ou mercado üõí",
  "Acompanhar consultas m√©dicas da fam√≠lia ü©∫",
  "Cuidar de plantas ou animais üåøüê∂",
  "Conversar com amigos üëØ‚Äç‚ôÄÔ∏è",
  "Planejar momentos de descanso ‚òï",
  "Refletir sobre o dia üåÖ",
  "Delegar ou dividir tarefas ‚öñÔ∏è"
];

const tasksDiv = document.getElementById('tasks');
const checklistContainer = document.getElementById('checklist-container');
const genderAnimation = document.getElementById('genderAnimation');
const submitBtn = document.getElementById('submitBtn');
const modalBody = document.getElementById('modalBody');
const genderRadios = document.querySelectorAll('input[name="gender"]');

// Criar checkboxes dinamicamente
tasks.forEach((task, i) => {
  const div = document.createElement("div");
  div.classList.add("task-item");
  div.innerHTML = `<input type="checkbox" class="task-checkbox" id="task${i}"><label for="task${i}">${task}</label>`;
  tasksDiv.appendChild(div);
});

// Alterar g√™nero
genderRadios.forEach(radio => {
  radio.addEventListener('change', () => {
    const gender = radio.value;
    if(gender === 'homem') {
      checklistContainer.style.backgroundColor = '#fff4a3';
      genderAnimation.innerHTML = `<img src=" img/homemm.png">`;
      document.querySelectorAll('.task-checkbox').forEach(cb => cb.style.accentColor = '#FFD700');
    } else {
      checklistContainer.style.backgroundColor = '#f8c8dc';
      genderAnimation.innerHTML = `<img src="img/mulher.png">`;
      document.querySelectorAll('.task-checkbox').forEach(cb => cb.style.accentColor = '#d63384');
    }
  });
});

// Resultado Modal
submitBtn.addEventListener('click', () => {
  const checkedTasks = [];
  document.querySelectorAll('.task-checkbox').forEach((cb, i) => {
    if(cb.checked) checkedTasks.push(tasks[i]);
  });

  const gender = document.querySelector('input[name="gender"]:checked')?.value;
  if(!gender) {
    modalBody.innerHTML = `<p style="font-weight:600;">Selecione um g√™nero antes de ver o resultado üí°</p>`;
    new bootstrap.Modal(document.getElementById('resultModal')).show();
    return;
  }

  let message = "";
  const completed = checkedTasks.length;
  if(gender==='homem'){
    if(completed<5) message="ü§î Poucas tarefas realizadas! Que tal refletir sobre o quanto as responsabilidades s√£o compartilhadas?";
    else if(completed<10) message="üëè Boa tentativa! Dividir mais tarefas ajuda a equilibrar a rotina familiar.";
    else message="üí™ Excelente! Sua dedica√ß√£o √© inspiradora e voc√™ est√° contribuindo bastante ‚Äî continue valorizando o cuidado e a parceria.";
  } else {
    if(completed<5) message="ü§î Poucas tarefas realizadas! Que tal refletir sobre o quanto as responsabilidades s√£o compartilhadas?";
    else if(completed<10) message="üíñ Voc√™ est√° fazendo muito! Procure equilibrar responsabilidades sem se cobrar demais.";
    else message="üåü Incr√≠vel! Sua dedica√ß√£o √© inspiradora, mas reserve tempo para si mesma tamb√©m.";
  }

  modalBody.innerHTML = `<h5>${completed} de ${tasks.length} tarefas completadas</h5>
    <ul>${checkedTasks.map(t=>`<li>${t}</li>`).join('')}</ul>
    <p style="margin-top:15px;font-weight:600;">${message}</p>`;

  new bootstrap.Modal(document.getElementById('resultModal')).show();
});


});



// Lista de respostas de todos os cards
const allResponses = {
  1: [
    "Antes do casamento e da maternidade, eu tinha a oportunidade de se dedicar intensamente ao meu desenvolvimento pessoal, carreira e vida social, com mais liberdade e foco em si mesma. Essa fase √© caracterizada por uma rotina mais flex√≠vel e decis√µes pautadas nas pr√≥prias necessidades e desejos.",
    "Intransigente",
    "Era muito nova tinha muitos sonhos.",
    "Trabalhava muito. Meu sonho era comprar uma casa",
    "Eu era uma jovem sonhadora que trabalha e estudava e tinha uma vida social.",
    "Antes da maternidade, eu era apenas uma menina cheia de sonhos da juventude.",
    "Eu apenas estudava e trabalhava n√£o tinha uma responsabilidade muito grande"
  ],
  2: [
    "Sim a experi√™ncia de ser m√£e e mulher √© profundamente transformadora, mudando o corpo, as prioridades, o tempo e a percep√ß√£o do mundo.",
    "Precisei me reinventar",
    "Ah com certeza vamos amadurecendo e se reinventando ao longo da vida.",
    "Mudou tudo. Parei de trabalhar para cuidar da fam√≠lia",
    "Depois que casei e virei m√£e tudo mudou, veio os desafios preocupa√ß√µes e a responsabilidade",
    "Eu estou ainda me reinventando a todo momento.",
    "N√£o sou mais a mesma pessoa pois hoje sou mais madura e respons√°vel e bem mais sentimental algumas situa√ß√µes"
  ],
  3: [
    "As prioridades passam a girar em torno do filho, o que afeta desde o sono e a rotina at√© os planos de viagem, al√©m de gerar novas responsabilidades e preocupa√ß√µes.",
    "Mudei h√°bitos alimentares, interesso menos por futilidade, tenho preocupa√ß√£o com o futuro",
    "A vida de solteira n√£o √© muito desafiadora, mas a partir do momento que casamos e temos nossas fam√≠lias a prioridade muda, com a responsabilidade e fun√ß√£o de esposa e m√£e mudamos muito.",
    "Ex: mais responsabilidade e saber que no lar temos um papel importante.",
    "Antes eu me preocupava com meu futuro. Hoje me preocupo muito mais com o futuro dos meus filhos.",
    "Hoje me vejo uma mulher matura, consciente, cheia de afazeres dom√©sticos, sinto que me deixei de lado, minha prioridade √© minha fam√≠lia, meus filhos e meu marido.",
    "Em mim percebi, que mesmo na dor no sofrimento precisamos engolir toda dor e seguir.",
    "Hoje a minha prioridade sempre s√£o meus filhos o bem estar deles"
  ],
  4: [
    "Como m√£e, √© mais comum que os sonhos sejam colocados em pausa, e n√£o totalmente interrompidos. A maternidade traz uma fase de profundas transforma√ß√µes na vida da mulher e, embora possa exigir uma readequa√ß√£o de prioridades e tempo, n√£o significa necessariamente o fim dos projetos pessoais.",
    "Deixei em pausa",
    "Em parte sim, mas as vezes nos colocamos em segundo plano.",
    "Est√° em pausa",
    "Tive que deixar de lado, j√° que n√£o tenho uma profiss√£o, pois engravidei cedo, virei m√£e e fiquei em segundo plano",
    "Est√£o em pausa.",
    "Ainda continuo correndo atr√°s dos meus sonhos, os meus filhos me mostraram que sou capaz"
  ],
  5: [
    "Sim, a sociedade ainda imp√µe expectativas espec√≠ficas e muitas vezes irreais sobre as mulheres e m√£es, mesmo que os pap√©is de g√™nero tradicionais tenham sido desafiados. Essas expectativas se manifestam em diversas √°reas da vida, causando press√£o e sobrecarga.",
    "A expectativa de que temos que dar conta de tudo",
    "Sim, a mulher tem que dar conta de casa, esposo e filho, quando algo sai do trilho ainda a culpam.",
    "N√£o",
    "Sim, percebo que as portas se fecham na √°rea profissional quando voc√™ fala que tem filhos.",
    "Ainda colocam essas expectativas em ser m√£e, tem que ser o exemplo, o espelho, para que os filhos tentem se espelhar, mas nem sempre seguem da forma que achamos o certo o bom.",
    "Sim, principalmente em termos de emprego ela n√£o consegue, pois j√° √© m√£e, temos algumas dificuldades"
  ],
  6: [
    "Essa percep√ß√£o ‚Äúmelhor‚Äù como mulher, esposa e m√£e pode ser moldado por diversos fatores, como o autocuidado, o apoio do parceiro e a liberta√ß√£o da press√£o por perfei√ß√£o. Ningu√©m deveria ser obrigado a atender a um padr√£o externo, pois a defini√ß√£o de sucesso nesses pap√©is √© pessoal e constru√≠da no contexto individual.",
    "Que n√≥s tamb√©m precisamos de cuidado",
    "Que somos humanas e tem dias e dias, n√£o precisamos dar conta de tudo o tempo todo.",
    "N√£o tenho uma opini√£o",
    "Que mesmo sendo esposa e m√£e, temos sonhos e vontade de crescer profissionalmente, temos sonhos.",
    "Que as m√£es tamb√©m erram, tamb√©m precisam de carinho e descanso.",
    "N√≥s somos as verdadeiras hero√≠nas, n√£o somos muito fortes at√© mesmo nas press√µes."
  ],
  7: [
    "Manter os pr√≥prios sonhos e praticar o autocuidado s√£o essenciais para a sa√∫de f√≠sica e mental das mulheres, pois contribuem para a autoestima, o bem-estar e a realiza√ß√£o pessoal. Historicamente, muitas mulheres foram condicionadas a colocar as necessidades dos outros √† frente das suas, mas priorizar a si mesma √© crucial para evitar a exaust√£o e o esgotamento.",
    "Ame-se acima de tudo. Respeite seu corpo, cuide da sua sa√∫de f√≠sica e mental. Se cuidem",
    "Manter sempre as suas metas e n√£o se anular pelos outros.",
    "Procurar o melhor para si mesma dentro das suas possibilidades.",
    "Priorize a si mesmo, n√£o se deixe porque o tempo n√£o volta.",
    "Enfrentem seus medos, lutem para que cada dia seja melhor, chore quando precisar, gritem, depois lave o rosto, coloque sua melhor roupa, fa√ßa maquiagem, cabelo, unhas e apare√ßa linda, desejada",
    "N√£o desistir, voc√™ √© capaz e dar√° conta de tudo: casa, marido, filhos, trabalho e principalmente de si mesma"
  ]
};

// Inicializa o √≠ndice de cada card
const indices = {};

// Fun√ß√£o para atualizar respostas automaticamente
function startResponseRotation() {
  for (let cardId in allResponses) {
    indices[cardId] = 0;
    const responseElement = document.getElementById(`response-text-${cardId}`);
    if (responseElement) {
      setInterval(() => {
        indices[cardId] = (indices[cardId] + 1) % allResponses[cardId].length;
        responseElement.textContent = allResponses[cardId][indices[cardId]];
      }, 7000); // 7 segundos
    }
  }
}

// Inicia a rota√ß√£o ao carregar a p√°gina
window.addEventListener('DOMContentLoaded', startResponseRotation);



// ===================== MURAL DIN√ÇMICO =====================
document.addEventListener("DOMContentLoaded", () => {
  const postText = document.getElementById("postText");
  const postBtn = document.getElementById("postBtn");
  const muralPosts = document.getElementById("muralPosts");

  if (!postText || !postBtn || !muralPosts) return;

  let posts = JSON.parse(localStorage.getItem("muralPosts")) || [];

  function renderPosts() {
    muralPosts.innerHTML = "";
    posts.forEach((post, index) => {
      const card = document.createElement("div");
      card.classList.add("col-12", "col-md-6", "col-lg-4");

      card.innerHTML = `
        <div class="mural-post" data-index="${index}">
          <p class="mural-text">${post.text}</p>
          <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">${post.date}</small>
            <div>
              <button class="like-btn"><i class="fa-solid fa-heart${post.liked ? ' text-danger' : ''}"></i></button>
              <span class="like-count">${post.likes}</span>
            </div>
          </div>
        </div>
      `;
      muralPosts.appendChild(card);
    });
  }

  function savePosts() {
    localStorage.setItem("muralPosts", JSON.stringify(posts));
  }

  postBtn.addEventListener("click", () => {
    const text = postText.value.trim();
    if (!text) return alert("Escreva algo antes de publicar üí¨");

    const newPost = {
      text,
      date: new Date().toLocaleDateString("pt-BR", {
        day: "2-digit",
        month: "long",
        year: "numeric"
      }),
      likes: 0,
      liked: false,
    };

    posts.unshift(newPost);
    savePosts();
    renderPosts();
    postText.value = "";
  });

  muralPosts.addEventListener("click", (e) => {
    const btn = e.target.closest(".like-btn");
    if (!btn) return;
    const card = btn.closest(".mural-post");
    const index = parseInt(card.dataset.index);

    posts[index].liked = !posts[index].liked;
    posts[index].likes += posts[index].liked ? 1 : -1;
    savePosts();
    renderPosts();
  });

  renderPosts();

  function renderPosts() {
  muralPosts.innerHTML = "";
  posts.forEach((post, index) => {
    const card = document.createElement("div");
    card.classList.add("col-12", "col-md-6", "col-lg-4");

    // Escolhe uma cor de fundo aleat√≥ria para o post
    const colors = ["color1", "color2", "color3", "color4", "color5"];
    const colorClass = colors[index % colors.length];

    card.innerHTML = `
      <div class="mural-post ${colorClass}" data-index="${index}">
        <p class="mural-text">${post.text}</p>
        <div class="d-flex justify-content-between align-items-center">
          <small class="text-muted">${post.date}</small>
          <div>
            <button class="like-btn"><i class="fa-solid fa-heart${post.liked ? ' text-danger' : ''}"></i></button>
            <span class="like-count">${post.likes}</span>
          </div>
        </div>
      </div>
    `;
    muralPosts.appendChild(card);
  });
}

// Anima√ß√£o de brilho ao curtir
muralPosts.addEventListener("click", (e) => {
  const btn = e.target.closest(".like-btn");
  if (!btn) return;
  const card = btn.closest(".mural-post");
  const index = parseInt(card.dataset.index);

  posts[index].liked = !posts[index].liked;
  posts[index].likes += posts[index].liked ? 1 : -1;
  savePosts();
  renderPosts();

  // Efeito de brilho r√°pido no cora√ß√£o
  const icon = btn.querySelector("i");
  icon.classList.add("glowing");
  setTimeout(() => icon.classList.remove("glowing"), 600);
});


});
